/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ChangeTaker
 * @category generated
 */
export type ChangeTakerInstructionArgs = {
  newTaker: number[] /* size: 32 */
}
/**
 * @category Instructions
 * @category ChangeTaker
 * @category generated
 */
export const ChangeTakerStruct = new beet.BeetArgsStruct<
  ChangeTakerInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['newTaker', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  'ChangeTakerInstructionArgs'
)
/**
 * Accounts required by the _ChangeTaker_ instruction
 *
 * @property [**signer**] maker
 * @property [_writable_] order
 * @property [] newTaker
 * @category Instructions
 * @category ChangeTaker
 * @category generated
 */
export type ChangeTakerInstructionAccounts = {
  maker: web3.PublicKey
  order: web3.PublicKey
  newTaker: web3.PublicKey
}

export const changeTakerInstructionDiscriminator = 5

/**
 * Creates a _ChangeTaker_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ChangeTaker
 * @category generated
 */
export function createChangeTakerInstruction(
  accounts: ChangeTakerInstructionAccounts,
  args: ChangeTakerInstructionArgs,
  programId = new web3.PublicKey('GKTd9AGFpPGNKK28ncHeGGuT7rBJLzPxNjCUPKn8Yik8')
) {
  const [data] = ChangeTakerStruct.serialize({
    instructionDiscriminator: changeTakerInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.maker,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.order,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newTaker,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
