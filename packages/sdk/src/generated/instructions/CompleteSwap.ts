/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category CompleteSwap
 * @category generated
 */
export const CompleteSwapStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number;
}>([['instructionDiscriminator', beet.u8]], 'CompleteSwapInstructionArgs');
/**
 * Accounts required by the _CompleteSwap_ instruction
 *
 * @property [**signer**] taker
 * @property [_writable_] order
 * @property [_writable_] makerReceivingAccount
 * @property [_writable_] takerSendingAccount
 * @property [_writable_] takerReceivingAccount
 * @property [_writable_] escrowTokenAccount
 * @property [] makerMint
 * @property [] takerMint
 * @property [] tokenAuthority
 * @category Instructions
 * @category CompleteSwap
 * @category generated
 */
export type CompleteSwapInstructionAccounts = {
  taker: web3.PublicKey;
  order: web3.PublicKey;
  makerReceivingAccount: web3.PublicKey;
  takerSendingAccount: web3.PublicKey;
  takerReceivingAccount: web3.PublicKey;
  escrowTokenAccount: web3.PublicKey;
  makerMint: web3.PublicKey;
  takerMint: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  tokenAuthority: web3.PublicKey;
};

export const completeSwapInstructionDiscriminator = 6;

/**
 * Creates a _CompleteSwap_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CompleteSwap
 * @category generated
 */
export function createCompleteSwapInstruction(
  accounts: CompleteSwapInstructionAccounts,
  programId = new web3.PublicKey('GKTd9AGFpPGNKK28ncHeGGuT7rBJLzPxNjCUPKn8Yik8'),
) {
  const [data] = CompleteSwapStruct.serialize({
    instructionDiscriminator: completeSwapInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.taker,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.order,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerReceivingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.takerSendingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.takerReceivingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.takerMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAuthority,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
