/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category InitializeTreasury
 * @category generated
 */
export type InitializeTreasuryInstructionArgs = {
  authority: number[] /* size: 32 */;
  fee: number;
};
/**
 * @category Instructions
 * @category InitializeTreasury
 * @category generated
 */
export const InitializeTreasuryStruct = new beet.BeetArgsStruct<
  InitializeTreasuryInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['authority', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['fee', beet.u16],
  ],
  'InitializeTreasuryInstructionArgs',
);
/**
 * Accounts required by the _InitializeTreasury_ instruction
 *
 * @property [**signer**] payer
 * @property [_writable_] treasury
 * @property [] authority
 * @category Instructions
 * @category InitializeTreasury
 * @category generated
 */
export type InitializeTreasuryInstructionAccounts = {
  payer: web3.PublicKey;
  treasury: web3.PublicKey;
  authority: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
};

export const initializeTreasuryInstructionDiscriminator = 0;

/**
 * Creates a _InitializeTreasury_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeTreasury
 * @category generated
 */
export function createInitializeTreasuryInstruction(
  accounts: InitializeTreasuryInstructionAccounts,
  args: InitializeTreasuryInstructionArgs,
  programId = new web3.PublicKey('GKTd9AGFpPGNKK28ncHeGGuT7rBJLzPxNjCUPKn8Yik8'),
) {
  const [data] = InitializeTreasuryStruct.serialize({
    instructionDiscriminator: initializeTreasuryInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
