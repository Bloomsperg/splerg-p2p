/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category InitializeOrder
 * @category generated
 */
export type InitializeOrderInstructionArgs = {
  makerAmount: beet.bignum;
  takerAmount: beet.bignum;
};
/**
 * @category Instructions
 * @category InitializeOrder
 * @category generated
 */
export const InitializeOrderStruct = new beet.BeetArgsStruct<
  InitializeOrderInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['makerAmount', beet.u64],
    ['takerAmount', beet.u64],
  ],
  'InitializeOrderInstructionArgs',
);
/**
 * Accounts required by the _InitializeOrder_ instruction
 *
 * @property [**signer**] maker
 * @property [_writable_] order
 * @property [_writable_] makerAta
 * @property [_writable_] pdaMakerAta
 * @property [] makerMint
 * @property [] takerMint
 * @category Instructions
 * @category InitializeOrder
 * @category generated
 */
export type InitializeOrderInstructionAccounts = {
  maker: web3.PublicKey;
  order: web3.PublicKey;
  makerAta: web3.PublicKey;
  pdaMakerAta: web3.PublicKey;
  makerMint: web3.PublicKey;
  takerMint: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
};

export const initializeOrderInstructionDiscriminator = 3;

/**
 * Creates a _InitializeOrder_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeOrder
 * @category generated
 */
export function createInitializeOrderInstruction(
  accounts: InitializeOrderInstructionAccounts,
  args: InitializeOrderInstructionArgs,
  programId = new web3.PublicKey('GKTd9AGFpPGNKK28ncHeGGuT7rBJLzPxNjCUPKn8Yik8'),
) {
  const [data] = InitializeOrderStruct.serialize({
    instructionDiscriminator: initializeOrderInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.maker,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.order,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pdaMakerAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.takerMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
